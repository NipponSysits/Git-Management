const config 		= require('$custom/config');
const mongoose 	= require('mongoose');
const Grid 			= require('gridfs-stream');
const Q         = require('q');

const name = (config.arg == 'default') ? 'logs' : 'debugerr'
const cache = (config.arg == 'default') ? 'cache' : 'debugerr';

mongoose.connect(config.mongoose);
Grid.mongo = mongoose.mongo;

// var gridfs = app.get('gridfs');

// var is;
// var os;
// //get the extenstion of the file
// var extension = req.files.file.path.split(/[. ]+/).pop();
// is = fs.createReadStream(req.files.file.path);
// os = gridfs.createWriteStream({ filename: shortId.generate()+'.'+extension });
// is.pipe(os);

// os.on('close', function (file) {
//   //delete file from temp folder
//   fs.unlink(req.files.file.path, function() {
//     res.json(200, file);
//   });
// });


const Schema = {
	Commits: mongoose.Schema({
	  commit_id: String,
	  repository_id: Number,
	  author: String,
	  email: String,
		subject: String,
		comment: String,
		logs: Boolean,
	  since: Date
	}),
	Repository: mongoose.Schema({
	  repository_id: Number,
	  name: String,
	  title: String,
	  description: String,
	  readme: Buffer,
	  master: String,
	  branch: [String],
	  files: [{
	  	filename: String, 
	  	ext: String, 
	  	size: Number, 
	  	since: Date, 
	  	comment: String
	  }]
	}),
	Clients: mongoose.Schema({
	  user_id: Number,
	  fullname: String,
	})
}

module.exports = {
	Grid: function(){
		var def = Q.defer();
		var conn = mongoose.createConnection(config.mongoose);
		conn.once('open', function () {
			var gridfs = Grid(conn.db);
		  def.resolve(gridfs);
		});
    return def.promise;
	},
	Commit: mongoose.model(name+'.commits', Schema.Commits),
	Client: mongoose.model(cache+'.clients', Schema.Clients),
	Repository: mongoose.model(cache+'.repositories', Schema.Repository)
}