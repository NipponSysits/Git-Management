const config 		= require('$custom/config');
const mongoose 	= require('mongoose');
const Grid 			= require('gridfs-stream');
const Q       	= require('q');

const name = (config.arg == 'default') ? 'logs' : 'test'
const cache = (config.arg == 'default') ? 'cache' : 'test';

console.log('MONGO_URL', process.env.MONGO_URL);
mongoose.connect(process.env.MONGO_URL);

const Schema = {
	Commits: mongoose.Schema({
	  commit_id: String,
	  repository_id: Number,
	  author: String,
	  email: String,
		subject: String,
		comment: String,
		logs: Boolean,
	  since: Date
	}),
	Repository: mongoose.Schema({
	  repository_id: Number,
	  name: String,
	  title: String,
	  description: String,
	  readme: Buffer,
	  master: String,
	  branch: [String],
	  files: [{
	  	filename: String, 
	  	ext: String, 
	  	size: Number, 
	  	since: Date, 
	  	comment: String
	  }]
	}),
	Clients: mongoose.Schema({
	  user_id: String,
	  session: String,
	  connected: Number,
	  disconnected: Number,
	})
}


module.exports = {
	Grid: function(){ return Grid(mongoose.connection.db, mongoose.mongo); },
	Commit: mongoose.model(name+'.commits', Schema.Commits),
	Client: mongoose.model(cache+'.clients', Schema.Clients),
	Repository: mongoose.model(cache+'.repositories', Schema.Repository),
	DB: function(customer){
		return mongoose.model(`db.mysql`, mongoose.Schema({ _table: String, _get: Object }));
		// var mongo = mongoose.model(`db.mysql`, mongoose.Schema({ _table: String, _get: Object }));
		// return {
		// 	find: function(where) {
		// 	  var def = Q.defer();
		// 		mongo.find(where,function(err, result){
		// 			if(err) def.reject(err); else def.resolve(result); 
		// 		});
		// 	  return def.promise;
		// 	},
		// 	findOne: function(where) {
		// 	  var def = Q.defer();
		// 		mongo.findOne(where,function(err, result){
		// 			if(err) def.reject(err); else def.resolve(result); 
		// 		});
		// 	  return def.promise;
		// 	},
		// 	insert: function(setObj){
		// 	  var def = Q.defer();
		// 	  var commit = new mongo(setObj);
		// 	  commit.save(function(err, result) { 
		// 	    if (err) def.reject(err); else def.resolve(result); 
		// 	  });
		// 	  return def.promise;
		// 	},
		// 	update: function(setObj, where){
		// 	  var def = Q.defer();
		// 		mongo.update(setObj, where, function(err, result){
		// 			if(err) def.reject(err); else def.resolve(result); 
		// 		});
		// 	  return def.promise;
		// 	},
		// 	delete: function(where){
		// 	  var def = Q.defer();
		// 		mongo.remove(where, function(err, result){
		// 			if(err) def.reject(err); else def.resolve(result); 
		// 		});
		// 	  return def.promise;
				
		// 	}
		// } 
	} 
}